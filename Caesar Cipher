/*# Write a method that takes in an integer `offset` and a string.
# Produce a new string, where each letter is shifted by `offset`. You
# may assume that the string contains only lowercase letters and
# spaces.
#
# When shifting "z" by three letters, wrap around to the front of the
# alphabet to produce the letter "c".
#
# You'll want to use String's `ord` method and Integer's `chr` method.
# `ord` converts a letter to an ASCII number code. `chr` converts an
# ASCII number code to a letter.
#
# You may look at the ASCII printable characters chart:
#
#     http://en.wikipedia.org/wiki/ASCII#ASCII_printable_characters
#
# Notice that the letter 'a' has code 97, 'b' has code 98, etc., up to
# 'z' having code 122.
#
# You may also want to use the `%` modulo operation to handle wrapping
# of "z" to the front of the alphabet.
#
# Difficulty: hard. Because this problem relies on outside
# information, we would not give it to you on the timed challenge. :-)*/

function caesarCipher(num, str){
    var codedLetters=[];
    var re = /[a-z]/i;
    for(var i=0; i<str.length; i++){
        if(str.charAt(i).match(re)){
            var char = str.charCodeAt(i)+num;
            if(char>122){
                char = 96+char-122;
            }
            codedLetters.push(String.fromCharCode(char));
        }
        else{
            codedLetters.push(str.charAt(i));
        }
    }
return codedLetters.join("");
}
caesarCipher(3, "abc xyz");
