/*# Write a method that takes in a string of lowercase letters (no
# uppercase letters, no repeats). Consider the *substrings* of the
# string: consecutive sequences of letters contained inside the string.
# Find the longest such string of letters that is a palindrome.
#
# Note that the entire string may itself be a palindrome.
#
# You may want to use Array's `slice(start_index, length)` method,
# which returns a substring of length `length` starting at index
# `start_index`:
#
#     "abcd".slice(1, 2) == "bc"
#     "abcd".slice(1, 3) == "bcd"
#     "abcd".slice(2, 1) == "c"
#     "abcd".slice(2, 2) == "cd"
#
# Difficulty: hard.*/

function longestPalindrome(str){
   var longest="";
   for(var i=0; i<str.length; i++){
       for(var j=0; j<str.length; j++){
            if(str[i]===str[j] && i!==j){
            var segment = str.slice(i, j+1);
            var sorted = segment.split("").reverse().join("");
                if(str.slice(i, j+1)===sorted)           {
                    if(segment.length>longest.length){
                        longest = segment;
                    }
                }
            }
       }
   }
return longest;
}
longestPalindrome("abcbdeffe")
//returns "effe"
